#!/usr/bin/php
<?php
$lastport="";
$lastallips="";
$portrange="";
@unlink("/root/nft/.cache");
@unlink("/root/nft/.ruleset");
@unlink("/root/nft/.ports");
@unlink("/root/nft/.tcr");
$tcrhead="tc qdisc del dev eth0 root > /dev/null || true
tc qdisc add dev eth0 root handle 1: htb default 1
tc class add dev eth0 parent 1: classid 1:1 htb rate 1gbit burst 15k\n";
$rulehead="flush ruleset\ntable ip nat {\nchain prerouting {\ntype nat hook prerouting priority 0; policy accept;\n";
$rulefoot="}\nchain postrouting {\ntype nat hook postrouting priority 0; policy accept;\nmasquerade\n}\n}\n";

$ipmapstr="";
$portmapstr="";
$sport="";
$stdin = fopen('php://stdin', 'r');
$cachefile = fopen("/root/nft/.cache",'w');
$ruleset = fopen("/root/nft/.ruleset",'w');
$tcr = fopen("/root/nft/.tcr",'w');
if(!is_resource($tcr) || !is_resource($ruleset) || !is_resource($stdin) || !is_resource($cachefile)) {echo "Something Unexpected happened\n";goto cls;}
fwrite($tcr,$tcrhead);
fwrite($ruleset,$rulehead);
    while (($buffer = fgets($stdin, 4096)) !== false) {
        if(strpos($buffer,'-A PREROUTING -s ')!==false){
			$barr=explode(" ",$buffer);
//cachefile related
			$allips=explode(",",$barr[3]);
			$dr=explode(":",$barr[13]);
			fwrite($cachefile,$barr[9]." ".$dr[0]." ".trim($dr[1])." ".substr(trim($barr[17]),1,-1)." 0");
			$newspeedlimit=substr(trim($barr[17]),1,-1);
			if($newspeedlimit != "0") {
				fwrite($tcr,"tc class add dev eth0 parent 1: classid 1:".$barr[9]." htb rate ".$newspeedlimit." burst 15k\ntc filter add dev eth0 parent 1: protocol ip prio 1 basic match 'cmp(u16 at 0 layer transport gt ".($barr[9]-1).") and cmp(u16 at 0 layer transport lt ".($barr[9]+1).")' flowid 1:".$barr[9]."\n");
			}
			foreach($allips as $ip) fwrite($cachefile," ".$ip);
			fwrite($cachefile,"\n");
//ruleset related
			if($sport == "") {$sport=$barr[9];$speedlimit=substr(trim($barr[17]),1,-1);$lastallips = $barr[3];}
			$ipmapstr .= $barr[9].":".$dr[0].",\n";
			$portmapstr .= $barr[9].":".trim($dr[1]).",\n";
			$lastport = $barr[9];
         }
		 if(strpos($buffer,"#end")!==false){
			//if($speedlimit != "0") {
				//fwrite($tcr,"tc class add dev eth0 parent 1: classid 1:".$sport." htb rate ".$speedlimit." burst 15k\ntc filter add dev eth0 parent 1: protocol ip prio 1 basic match 'cmp(u16 at 0 layer transport gt ".($sport-1).") and cmp(u16 at 0 layer transport lt ".($lastport+1).")' flowid 1:".$sport."\n");
			//}
			$thisrule = "tcp dport ".$sport."-".$lastport." ip saddr {".$lastallips."} dnat tcp dport map {".rtrim($ipmapstr,",")."} : tcp dport map {".rtrim($portmapstr,",")."}";
			$portrange.=$sport."-".$lastport." ";
			$sport="";
			$ipmapstr="";
			$portmapstr="";
			fwrite($ruleset,$thisrule."\n");

		 }
    }
    if (!feof($stdin))echo "Error: unexpected fgets() fail\n";

fwrite($ruleset,$rulefoot);
file_put_contents("/root/nft/.ports",trim($portrange));
cls:
if(is_resource($ruleset))fclose($tcr);
if(is_resource($ruleset))fclose($ruleset);
if(is_resource($stdin))fclose($stdin);
if(is_resource($cachefile))fclose($cachefile);
exec("/root/nft/cli/pkfmap /root/nft/.cache -c 0 65535");
exec("nft -f /root/nft/.ruleset");
exec("/bin/bash /root/nft/.tcr");
#exec("echo 1 > /sys/module/sch_htb/parameters/htb_rate_est");
exec("sysctl -w net.netfilter.nf_conntrack_tcp_loose=0");
exec("sysctl -w net.netfilter.nf_conntrack_tcp_timeout_time_wait=1");
exec("sysctl -w net.netfilter.nf_conntrack_tcp_timeout_established=120");
?>
